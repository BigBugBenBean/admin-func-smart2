
/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package ws.cds.immd.v1;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.pccw.immd.adminfunc.domain.*;
import com.pccw.immd.adminfunc.repository.*;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;

import javax.persistence.EntityManager;
import javax.persistence.Query;
import java.util.ArrayList;
import java.util.List;

/**
 * This class was generated by Apache CXF 3.2.3
 * 2018-03-22T15:10:28.098+08:00
 * Generated source version: 3.2.3
 *
 */
//
@javax.jws.WebService(
        serviceName = "EnquireTransactionGroupServiceWSImplService",
        portName = "EnquireTransactionGroupServiceWSImplPort",
        targetNamespace = "http://txgroup.cds.icons.immd/",
        wsdlLocation = "wsdl/enquireTranGpSvc.wsdl",
        endpointInterface = "ws.cds.immd.v1.EnquireTransactionGroupServiceWS")
@Service("enquireTransactionGroupServiceWSImplPortImpl")
public class EnquireTransactionGroupServiceWSImplPortImpl implements EnquireTransactionGroupServiceWS {

    @Autowired
    @Qualifier("roleGroupRepository")
    private RoleGroupRepository roleGroupRepository;

    @Autowired
    @Qualifier("groupRepository")
    private GroupRepository groupRepository;

    @Autowired
    @Qualifier("groupFuncRepository")
    private GroupFuncRepository groupFuncRepository;

    @Autowired
    @Qualifier("funcRepository")
    private FuncRepository funcRepository;

    @Autowired
    @Qualifier("roleRepository")
    RoleRepository roleRepository;

    private static final Logger LOG = Logger.getLogger(EnquireTransactionGroupServiceWSImplPortImpl.class.getName());

    public EnquireTransactionGroupServiceWSImplPortImpl(){}

    /* (non-Javadoc)
     * @see ws.cds.immd.v1.EnquireTransactionGroupServiceWS#enquireAllData()*
     */
    public RoleTxgpTxidDTO enquireAllData() throws VLDExceptionException,  CoreAppExceptionException   {
        LOG.info("Executing operation enquireAllData");
        try {
            RoleTxgpTxidDTO roleTxgpTxidDTO = new RoleTxgpTxidDTO();
            List<RoleGroup> roleGroups = roleGroupRepository.findAll();
            List<RoleTxgp> roleTxgps = roleTxgpTxidDTO.getRoleTxgps();
            LOG.info("roleGroups size: " + roleGroups.size());
            int roleCdCount = 0;
            int groupIdCount = 0;

            for (RoleGroup group : roleGroups) {
                LOG.info(group.getId().getRoleCd() + "\t\t" + group.getId().getGroupId());

                if (roleTxgps.size() == 0) {
                    roleTxgps.add(createNewRoleTxGp(group));
                    roleCdCount++;
                    groupIdCount++;
                } else {
                    boolean addNewCd = true;

                    for (RoleTxgp txgp : roleTxgps) {
                        if (txgp.getRoleCD().equals(group.getId().getRoleCd())) {
                            roleCdCount++;
                            addNewCd = false;
                            boolean addNewGroup = true;
                            for (String gpsStr : txgp.getTxGps()) {
                                if (gpsStr.equals(group.getId().getGroupId())) {
                                    groupIdCount++;
                                    addNewGroup = false;
                                    break;
                                }
                            }
                            if (addNewGroup) {
                                LOG.debug("addNewGroup("+txgp.getRoleCD()+":" + group.getId().getGroupId());
                                txgp.getTxGps().add(group.getId().getGroupId());
                            }
                            break;
                        }
                    }

                    if (addNewCd){
                        roleTxgps.add(createNewRoleTxGp(group));
                    }
                }
            }
            LOG.debug("roleCdCount size:" + roleCdCount);
            LOG.debug("groupIdCount size:" + groupIdCount);

            List<GroupFunc> groupFuncList = groupFuncRepository.findAll();
            LOG.info("groupFuncList size:" + groupFuncList.size());
            List<TxgpTxid> txgpTxids = roleTxgpTxidDTO.getTxgpTxids();
            for (GroupFunc groupFunc : groupFuncList) {
                if (txgpTxids.size() == 0) {
                    txgpTxids.add(createNewTxgpTxid(groupFunc));
                } else {
                    boolean addNewTxGp = true;
                    for (TxgpTxid txgpTxid : txgpTxids) {
                        if (txgpTxid.getTxGp().equals(groupFunc.getId().getGrpId())) {
                            addNewTxGp = false;
                            boolean addNewTxid = true;
                            for (String txId : txgpTxid.getTxids())
                                if (txId.equals(groupFunc.getId().getFuncId())) {
                                    addNewTxid = false;
                                    break;
                                }
                            if (addNewTxid) {
                                txgpTxid.getTxids().add(groupFunc.getId().getFuncId());
                            }
                            break;
                        }
                    }

                    if (addNewTxGp){
                        txgpTxids.add(createNewTxgpTxid(groupFunc));
                    }
                }
            }
            LOG.info("enquireAllDataResponse: " + (new ObjectMapper()).writeValueAsString(roleTxgpTxidDTO));
            return roleTxgpTxidDTO;
        } catch (Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    private TxgpTxid createNewTxgpTxid(GroupFunc groupFunc) {
        TxgpTxid txgpTxid = new TxgpTxid();
        txgpTxid.setTxGp(groupFunc.getId().getGrpId());
        txgpTxid.getTxids().add(groupFunc.getId().getFuncId());
        return txgpTxid;
    }

    private RoleTxgp createNewRoleTxGp(RoleGroup group) {
        LOG.info("NewRoleTxGp:" + group.getId().getRoleCd() + "\t\t" + group.getId().getGroupId());
        RoleTxgp roleTxgp = new RoleTxgp();
        roleTxgp.setRoleCD(group.getId().getRoleCd());
        roleTxgp.getTxGps().add(group.getId().getGroupId());
        return roleTxgp;
    }


    /* (non-Javadoc)
     * @see ws.cds.immd.v1.EnquireTransactionGroupServiceWS#enquireTransactionGroup(java.util.List<java.lang.String> roleCdList)*
     */
    public List<TransGrpRoleDTO> enquireTransactionGroup(List<String> roleCdList) throws VLDExceptionException,  CoreAppExceptionException   {
        LOG.info("Executing operation enquireTransactionGroup");
        System.out.println(roleCdList);
        try {
            List<String> groudIds = new ArrayList<>();
            List<TransGrpRoleDTO> transGrpRoleDtoList = new ArrayList<TransGrpRoleDTO>();
            List<RoleGroup> roleGroupList = roleGroupRepository.findByIdRoleCdIn(roleCdList);

            for (RoleGroup roleGroup : roleGroupList) {
                transGrpRoleDtoList.add(createTransGrpRoleDTO(roleGroup));
                groudIds.add(roleGroup.getId().getGroupId());
            }

            List<Group> groupList = groupRepository.findByGroupIdIn(groudIds);
            for (TransGrpRoleDTO transGrpRoleDTO : transGrpRoleDtoList) {
                Group grp = groupList.stream()
                        .filter(
                                g -> g.getGroupId().equals(transGrpRoleDTO.getTxGrpId()) )
                        .findFirst()
                        .orElse(null);
                if (grp != null) {
                    transGrpRoleDTO.setTxGrpDesc(grp.getGroupDesc());
                }
            }

            LOG.debug("EnquireTransactionGroupResponse: " + transGrpRoleDtoList);
            return transGrpRoleDtoList;

        } catch (Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    private TransGrpRoleDTO createTransGrpRoleDTO (RoleGroup roleGroup) {
        TransGrpRoleDTO dto = new TransGrpRoleDTO();
        dto.setRoleCd(roleGroup.getId().getRoleCd());
        dto.setTxGrpId(roleGroup.getId().getGroupId());
        return dto;
    }


    /* (non-Javadoc)
     * @see ws.cds.immd.v1.EnquireTransactionGroupServiceWS#enquireTxIDsByRoleCd(java.lang.String roleCd)*
     */
    public List<Txid> enquireTxIDsByRoleCd(String roleCd) {
        LOG.info("Executing operation enquireTxIDsByRoleCd");
        try {
            List<Txid> txidList = findTrxId(roleCd);
            LOG.debug("EnquireTxIDsByRoleCdResponse: " + txidList);
            return txidList;
        } catch (Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
    }

    private List findTrxId(String roleCd){
        List<Txid> txidList = new ArrayList<>();
        List<Func> funcList = funcRepository.findByFuncId(roleCd);
        funcList.stream().forEach(f -> {
            Txid txId = new Txid();
            txId.setTxid(f.getFuncId());
            txId.setTxidDesc(f.getFuncDesc());
            txidList.add(txId);
        });
        return txidList;
    }
}

