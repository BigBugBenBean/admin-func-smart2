
CREATE TABLE qrtz_job_details
  (
    SCHED_NAME VARCHAR2(120) NOT NULL,
    JOB_NAME  VARCHAR2(200) NOT NULL,
    JOB_GROUP VARCHAR2(200) NOT NULL,
    DESCRIPTION VARCHAR2(250) NULL,
    JOB_CLASS_NAME   VARCHAR2(250) NOT NULL,
    IS_DURABLE VARCHAR2(1) NOT NULL,
    IS_NONCONCURRENT VARCHAR2(1) NOT NULL,
    IS_UPDATE_DATA VARCHAR2(1) NOT NULL,
    REQUESTS_RECOVERY VARCHAR2(1) NOT NULL,
    JOB_DATA BLOB NULL,
    CONSTRAINT QRTZ_JOB_DETAILS_PK PRIMARY KEY (SCHED_NAME,JOB_NAME,JOB_GROUP)
);
CREATE TABLE qrtz_triggers
  (
    SCHED_NAME VARCHAR2(120) NOT NULL,
    TRIGGER_NAME VARCHAR2(200) NOT NULL,
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    JOB_NAME  VARCHAR2(200) NOT NULL,
    JOB_GROUP VARCHAR2(200) NOT NULL,
    DESCRIPTION VARCHAR2(250) NULL,
    NEXT_FIRE_TIME NUMBER(13) NULL,
    PREV_FIRE_TIME NUMBER(13) NULL,
    PRIORITY NUMBER(13) NULL,
    TRIGGER_STATE VARCHAR2(16) NOT NULL,
    TRIGGER_TYPE VARCHAR2(8) NOT NULL,
    START_TIME NUMBER(13) NOT NULL,
    END_TIME NUMBER(13) NULL,
    CALENDAR_NAME VARCHAR2(200) NULL,
    MISFIRE_INSTR NUMBER(2) NULL,
    JOB_DATA BLOB NULL,
    CONSTRAINT QRTZ_TRIGGERS_PK PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
    CONSTRAINT QRTZ_TRIGGER_TO_JOBS_FK FOREIGN KEY (SCHED_NAME,JOB_NAME,JOB_GROUP)
      REFERENCES QRTZ_JOB_DETAILS(SCHED_NAME,JOB_NAME,JOB_GROUP)
);
CREATE TABLE qrtz_simple_triggers
  (
    SCHED_NAME VARCHAR2(120) NOT NULL,
    TRIGGER_NAME VARCHAR2(200) NOT NULL,
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    REPEAT_COUNT NUMBER(7) NOT NULL,
    REPEAT_INTERVAL NUMBER(12) NOT NULL,
    TIMES_TRIGGERED NUMBER(10) NOT NULL,
    CONSTRAINT QRTZ_SIMPLE_TRIG_PK PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
    CONSTRAINT QRTZ_SIMPLE_TRIG_TO_TRIG_FK FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
	REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
);
CREATE TABLE qrtz_cron_triggers
  (
    SCHED_NAME VARCHAR2(120) NOT NULL,
    TRIGGER_NAME VARCHAR2(200) NOT NULL,
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    CRON_EXPRESSION VARCHAR2(120) NOT NULL,
    TIME_ZONE_ID VARCHAR2(80),
    CONSTRAINT QRTZ_CRON_TRIG_PK PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
    CONSTRAINT QRTZ_CRON_TRIG_TO_TRIG_FK FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
      REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
);
CREATE TABLE qrtz_simprop_triggers
  (
    SCHED_NAME VARCHAR2(120) NOT NULL,
    TRIGGER_NAME VARCHAR2(200) NOT NULL,
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    STR_PROP_1 VARCHAR2(512) NULL,
    STR_PROP_2 VARCHAR2(512) NULL,
    STR_PROP_3 VARCHAR2(512) NULL,
    INT_PROP_1 NUMBER(10) NULL,
    INT_PROP_2 NUMBER(10) NULL,
    LONG_PROP_1 NUMBER(13) NULL,
    LONG_PROP_2 NUMBER(13) NULL,
    DEC_PROP_1 NUMERIC(13,4) NULL,
    DEC_PROP_2 NUMERIC(13,4) NULL,
    BOOL_PROP_1 VARCHAR2(1) NULL,
    BOOL_PROP_2 VARCHAR2(1) NULL,
    CONSTRAINT QRTZ_SIMPROP_TRIG_PK PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
    CONSTRAINT QRTZ_SIMPROP_TRIG_TO_TRIG_FK FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
      REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
);
CREATE TABLE qrtz_blob_triggers
  (
    SCHED_NAME VARCHAR2(120) NOT NULL,
    TRIGGER_NAME VARCHAR2(200) NOT NULL,
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    BLOB_DATA BLOB NULL,
    CONSTRAINT QRTZ_BLOB_TRIG_PK PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),
    CONSTRAINT QRTZ_BLOB_TRIG_TO_TRIG_FK FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
        REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)
);
CREATE TABLE qrtz_calendars
  (
    SCHED_NAME VARCHAR2(120) NOT NULL,
    CALENDAR_NAME  VARCHAR2(200) NOT NULL,
    CALENDAR BLOB NOT NULL,
    CONSTRAINT QRTZ_CALENDARS_PK PRIMARY KEY (SCHED_NAME,CALENDAR_NAME)
);
CREATE TABLE qrtz_paused_trigger_grps
  (
    SCHED_NAME VARCHAR2(120) NOT NULL,
    TRIGGER_GROUP  VARCHAR2(200) NOT NULL,
    CONSTRAINT QRTZ_PAUSED_TRIG_GRPS_PK PRIMARY KEY (SCHED_NAME,TRIGGER_GROUP)
);
CREATE TABLE qrtz_fired_triggers
  (
    SCHED_NAME VARCHAR2(120) NOT NULL,
    ENTRY_ID VARCHAR2(95) NOT NULL,
    TRIGGER_NAME VARCHAR2(200) NOT NULL,
    TRIGGER_GROUP VARCHAR2(200) NOT NULL,
    INSTANCE_NAME VARCHAR2(200) NOT NULL,
    FIRED_TIME NUMBER(13) NOT NULL,
    SCHED_TIME NUMBER(13) NOT NULL,
    PRIORITY NUMBER(13) NOT NULL,
    STATE VARCHAR2(16) NOT NULL,
    JOB_NAME VARCHAR2(200) NULL,
    JOB_GROUP VARCHAR2(200) NULL,
    IS_NONCONCURRENT VARCHAR2(1) NULL,
    REQUESTS_RECOVERY VARCHAR2(1) NULL,
    CONSTRAINT QRTZ_FIRED_TRIGGER_PK PRIMARY KEY (SCHED_NAME,ENTRY_ID)
);
CREATE TABLE qrtz_scheduler_state
  (
    SCHED_NAME VARCHAR2(120) NOT NULL,
    INSTANCE_NAME VARCHAR2(200) NOT NULL,
    LAST_CHECKIN_TIME NUMBER(13) NOT NULL,
    CHECKIN_INTERVAL NUMBER(13) NOT NULL,
    CONSTRAINT QRTZ_SCHEDULER_STATE_PK PRIMARY KEY (SCHED_NAME,INSTANCE_NAME)
);
CREATE TABLE qrtz_locks
  (
    SCHED_NAME VARCHAR2(120) NOT NULL,
    LOCK_NAME  VARCHAR2(40) NOT NULL,
    CONSTRAINT QRTZ_LOCKS_PK PRIMARY KEY (SCHED_NAME,LOCK_NAME)
);

create index idx_qrtz_j_req_recovery on qrtz_job_details(SCHED_NAME,REQUESTS_RECOVERY);
create index idx_qrtz_j_grp on qrtz_job_details(SCHED_NAME,JOB_GROUP);

create index idx_qrtz_t_j on qrtz_triggers(SCHED_NAME,JOB_NAME,JOB_GROUP);
create index idx_qrtz_t_jg on qrtz_triggers(SCHED_NAME,JOB_GROUP);
create index idx_qrtz_t_c on qrtz_triggers(SCHED_NAME,CALENDAR_NAME);
create index idx_qrtz_t_g on qrtz_triggers(SCHED_NAME,TRIGGER_GROUP);
create index idx_qrtz_t_state on qrtz_triggers(SCHED_NAME,TRIGGER_STATE);
create index idx_qrtz_t_n_state on qrtz_triggers(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP,TRIGGER_STATE);
create index idx_qrtz_t_n_g_state on qrtz_triggers(SCHED_NAME,TRIGGER_GROUP,TRIGGER_STATE);
create index idx_qrtz_t_next_fire_time on qrtz_triggers(SCHED_NAME,NEXT_FIRE_TIME);
create index idx_qrtz_t_nft_st on qrtz_triggers(SCHED_NAME,TRIGGER_STATE,NEXT_FIRE_TIME);
create index idx_qrtz_t_nft_misfire on qrtz_triggers(SCHED_NAME,MISFIRE_INSTR,NEXT_FIRE_TIME);
create index idx_qrtz_t_nft_st_misfire on qrtz_triggers(SCHED_NAME,MISFIRE_INSTR,NEXT_FIRE_TIME,TRIGGER_STATE);
create index idx_qrtz_t_nft_st_misfire_grp on qrtz_triggers(SCHED_NAME,MISFIRE_INSTR,NEXT_FIRE_TIME,TRIGGER_GROUP,TRIGGER_STATE);

create index idx_qrtz_ft_trig_inst_name on qrtz_fired_triggers(SCHED_NAME,INSTANCE_NAME);
create index idx_qrtz_ft_inst_job_req_rcvry on qrtz_fired_triggers(SCHED_NAME,INSTANCE_NAME,REQUESTS_RECOVERY);
create index idx_qrtz_ft_j_g on qrtz_fired_triggers(SCHED_NAME,JOB_NAME,JOB_GROUP);
create index idx_qrtz_ft_jg on qrtz_fired_triggers(SCHED_NAME,JOB_GROUP);
create index idx_qrtz_ft_t_g on qrtz_fired_triggers(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP);
create index idx_qrtz_ft_tg on qrtz_fired_triggers(SCHED_NAME,TRIGGER_GROUP);






CREATE SEQUENCE job_history_id_seq
  START WITH 1
  INCREMENT BY 1
  CACHE 20;

  CREATE TABLE "JOB_HISTORY"
   (	"JOB_HISTORY_ID" NUMBER(16) NOT NULL,
	"JOB_NAME" VARCHAR2(256 CHAR) NOT NULL,
	"STATUS" VARCHAR2(10 CHAR) NOT NULL,
	"START_TIME" TIMESTAMP (6) NOT NULL,
	"END_TIME" TIMESTAMP (6)
   ) ;

   ALTER TABLE "JOB_HISTORY" ADD CONSTRAINT "JOB_HISTORY_PK" PRIMARY KEY ("JOB_HISTORY_ID");

   CREATE INDEX "JOB_NAME_IDX" ON "JOB_HISTORY" ("JOB_NAME");

   COMMENT ON COLUMN "JOB_HISTORY"."JOB_HISTORY_ID" IS 'Unique sequence number of Job History records';

   COMMENT ON COLUMN "JOB_HISTORY"."JOB_NAME" IS 'Quartz Job Name';

   COMMENT ON COLUMN "JOB_HISTORY"."STATUS" IS 'Job execution status. Possible values: SUCCESS, FAILED, RUNNING';

   COMMENT ON COLUMN "JOB_HISTORY"."START_TIME" IS 'Start time of the job execution';

   COMMENT ON COLUMN "JOB_HISTORY"."END_TIME" IS 'End time of the job execution';


------------------------------------------
-- JOB_MAINTENANCE
------------------------------------------
  CREATE SEQUENCE JOB_MAINTENANCE_ID_SEQ
	START WITH 1
	INCREMENT BY 1
	CACHE 20;

--------------------------------------------------------
--  File created - 星期五-四月-27-2018
--------------------------------------------------------
--------------------------------------------------------
--  DDL for Table JOB_MAINTENANCE
--------------------------------------------------------

  CREATE TABLE "JOB_MAINTENANCE"
   (	"JOB_MAINTENANCE_ID" NUMBER(16,0),
	"ACTION" VARCHAR2(10 BYTE),
	"JOB_NAME" VARCHAR2(200 BYTE),
	"DESCRIPTION" VARCHAR2(250 BYTE),
	"JOB_CLASS_NAME" VARCHAR2(250 BYTE),
	"CRON_EXPRESSION" VARCHAR2(120 BYTE),
	"DATAMAP_JSON" VARCHAR2(2000 BYTE),
	"EXECUTE_DATE" TIMESTAMP (6),
	"CREATE_DATE" TIMESTAMP (6)
   ) ;

   COMMENT ON COLUMN "JOB_MAINTENANCE"."JOB_MAINTENANCE_ID" IS 'Unique sequence number of Job Maintenance records';
   COMMENT ON COLUMN "JOB_MAINTENANCE"."ACTION" IS 'Action type: CREATE, UPDATE, DELETE';
   COMMENT ON COLUMN "JOB_MAINTENANCE"."JOB_NAME" IS 'Quartz Job Name';
   COMMENT ON COLUMN "JOB_MAINTENANCE"."DESCRIPTION" IS 'Description of the job';
   COMMENT ON COLUMN "JOB_MAINTENANCE"."JOB_CLASS_NAME" IS 'Fully qualifeid job class name';
   COMMENT ON COLUMN "JOB_MAINTENANCE"."CRON_EXPRESSION" IS 'Cron expression of the job schedule';
   COMMENT ON COLUMN "JOB_MAINTENANCE"."DATAMAP_JSON" IS 'Data map in JSON string expression';
   COMMENT ON COLUMN "JOB_MAINTENANCE"."EXECUTE_DATE" IS 'Execute date time of the adhoc job';
--------------------------------------------------------
--  DDL for Index JOB_MAINTENANCE_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "JOB_MAINTENANCE_PK" ON "JOB_MAINTENANCE" ("JOB_MAINTENANCE_ID")
  ;
--------------------------------------------------------
--  Constraints for Table JOB_MAINTENANCE
--------------------------------------------------------

  ALTER TABLE "JOB_MAINTENANCE" MODIFY ("JOB_MAINTENANCE_ID" NOT NULL ENABLE);
  ALTER TABLE "JOB_MAINTENANCE" MODIFY ("ACTION" NOT NULL ENABLE);
  ALTER TABLE "JOB_MAINTENANCE" MODIFY ("JOB_NAME" NOT NULL ENABLE);
  ALTER TABLE "JOB_MAINTENANCE" ADD CONSTRAINT "JOB_MAINTENANCE_PK" PRIMARY KEY ("JOB_MAINTENANCE_ID")
  USING INDEX  ENABLE;


------------------------------------------
-- JOB_ADHOC_RUN
------------------------------------------
  CREATE SEQUENCE JOB_ADHOC_RUN_ID_SEQ
	START WITH 1
	INCREMENT BY 1
	CACHE 20;

--------------------------------------------------------
--  File created - 星期五-四月-27-2018
--------------------------------------------------------
--------------------------------------------------------
--  DDL for Table JOB_ADHOC_RUN
--------------------------------------------------------

  CREATE TABLE "JOB_ADHOC_RUN"
   (	"JOB_ADHOC_RUN_ID" NUMBER(16,0),
	"JOB_NAME" VARCHAR2(250 BYTE),
	"DATAMAP_JSON" VARCHAR2(2000 BYTE),
	"CREATE_DATE" TIMESTAMP (6),
	"EXECUTE_DATE" TIMESTAMP (6)
   ) ;

   COMMENT ON COLUMN "JOB_ADHOC_RUN"."JOB_ADHOC_RUN_ID" IS 'Unique sequence number of Job Adhoc Run records';
   COMMENT ON COLUMN "JOB_ADHOC_RUN"."JOB_NAME" IS 'Quartz Job Name';
   COMMENT ON COLUMN "JOB_ADHOC_RUN"."DATAMAP_JSON" IS 'Data map in JSON string expression';
   COMMENT ON COLUMN "JOB_ADHOC_RUN"."CREATE_DATE" IS 'Create date time of the adhoc job';
   COMMENT ON COLUMN "JOB_ADHOC_RUN"."EXECUTE_DATE" IS 'Execute date time of the adhoc job';
--------------------------------------------------------
--  DDL for Index JOB_ADHOC_RUN_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "JOB_ADHOC_RUN_PK" ON "JOB_ADHOC_RUN" ("JOB_ADHOC_RUN_ID")
  ;
--------------------------------------------------------
--  Constraints for Table JOB_ADHOC_RUN
--------------------------------------------------------

  ALTER TABLE "JOB_ADHOC_RUN" MODIFY ("JOB_ADHOC_RUN_ID" NOT NULL ENABLE);
  ALTER TABLE "JOB_ADHOC_RUN" MODIFY ("JOB_NAME" NOT NULL ENABLE);
  ALTER TABLE "JOB_ADHOC_RUN" MODIFY ("CREATE_DATE" NOT NULL ENABLE);
  ALTER TABLE "JOB_ADHOC_RUN" ADD CONSTRAINT "JOB_ADHOC_RUN_PK" PRIMARY KEY ("JOB_ADHOC_RUN_ID")
  USING INDEX  ENABLE;
